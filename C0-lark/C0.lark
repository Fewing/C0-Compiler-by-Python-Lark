start : program
//类型
?ty: "int"  -> int
    | "double" -> double
    | "void" -> void

//程序
program : decl_stmt* function*

//函数
function_param : "const"? IDENT ":" ty
function_param_list : function_param ("," function_param)*
function : "fn" IDENT "(" function_param_list? ")" "->" ty block_stmt


//语句
?stmt : expr_stmt
    | decl_stmt
    | if_stmt
    | while_stmt
    | return_stmt
    | block_stmt
    | empty_stmt
//表达式语句
expr_stmt : expr ";"
//声明语句
let_decl_stmt : "let" IDENT ":" ty ("=" expr)? ";"
const_decl_stmt : "const" IDENT ":" ty "=" expr ";"
?decl_stmt : let_decl_stmt | const_decl_stmt
//if语句
if_stmt : "if" binary_expr block_stmt ("else" (block_stmt | if_stmt))?
//while语句
while_stmt : "while" binary_expr block_stmt
//return语句
return_stmt : "return" expr? ";"
//代码块
block_stmt : "{" stmt* "}"
//空语句
empty_stmt : ";"


//表达式
?expr : binary_expr
    | var_expr
    | assign_expr
    | as_expr
    | call_expr
    | str_expr
//调用表达式
call_param_list : (var_expr|str_expr) ("," var_expr|str_expr)*
call_expr : IDENT "(" call_param_list? ")"
    | "getint" "(" call_param_list? ")" -> getint
    | "getdouble" "(" call_param_list? ")" -> getdouble
    | "getchar" "(" call_param_list? ")" -> getchar
    | "putint" "(" call_param_list? ")" -> putint
    | "putdouble" "(" call_param_list? ")"-> putdouble
    | "putchar" "(" call_param_list? ")" -> putchar
    | "putstr" "(" call_param_list? ")" -> putstr
    | "putln" "(" call_param_list? ")" -> putln
//字符串表达式
str_expr : ESCAPED_STRING
//赋值表达式
assign_expr  : IDENT "=" var_expr
//类型转换
as_expr : var_expr "as" ty
//布尔
?binary_expr : var_expr
    | binary_expr "==" var_expr -> equl
    | binary_expr "!=" var_expr ->neq
    | binary_expr "<" var_expr ->lt
    | binary_expr ">" var_expr ->gt
    | binary_expr "<=" var_expr ->le
    | binary_expr ">=" var_expr ->ge
    | "(" binary_expr ")"
//数值
?var_expr: product
    | var_expr "+" product   -> add
    | var_expr "-" product   -> sub

?product: atom
    | product "*" atom  -> mul
    | product "/" atom  -> div

?atom: INT           -> int_num
     | FLOAT         ->float_num
     | "-" atom         -> neg
     | IDENT             -> var
     | "(" var_expr ")"
     | call_expr


%import common.CNAME -> FNCIDENT
%import common.CNAME -> IDENT
%import common.INT 
%import common.FLOAT 
%import common.ESCAPED_STRING
%import common.WS_INLINE
%ignore WS_INLINE
//注释
COMMENT: "//" /[^\n]/*
%ignore COMMENT

%ignore "\n"