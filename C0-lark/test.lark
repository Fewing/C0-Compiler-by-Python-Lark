start : program
//类型
ty: "int" -> int
    |"void" ->void

//程序
program : decl_stmt* function*
//函数
function_param : "const"? NAME ":" ty
function_param_list : function_param ("," function_param)*
function : "fn" NAME "(" function_param_list? ")" "->" ty block_stmt
//语句
?stmt : expr_stmt
    | decl_stmt
    | if_stmt
    | while_stmt
    | return_stmt
    | block_stmt
    | empty_stmt
//表达式语句
expr_stmt : expr ";"
//声明语句
let_decl_stmt : "let" NAME ":" ty ("=" expr)? ";"
const_decl_stmt : "const" NAME ":" ty "=" expr ";"
decl_stmt : let_decl_stmt | const_decl_stmt
//if语句
if_stmt : "if" expr block_stmt ("else" (block_stmt | if_stmt))?
//while语句
while_stmt : "while" expr block_stmt
//return语句
return_stmt : "return" expr? ";"
//代码块
block_stmt : "{" stmt* "}"
//空语句
empty_stmt : ";"


//表达式
expr : bool_expr
    | var_expr
    | assign_expr
    //| as_expr
    | call_expr
    | str_expr
//调用表达式
call_param_list : expr ("," expr)*
call_expr : NAME "(" call_param_list? ")"       ->call_fn
//字符串表达式
str_expr : ESCAPED_STRING
//赋值表达式
?assign_expr  : NAME "=" var_expr    -> assign_var 
//布尔
?bool_expr : expr "==" expr -> equl
    | expr "!=" expr ->neq
    | expr "<" expr ->lt
    | expr ">" expr ->gt
    | expr "<=" expr ->le
    | expr ">=" expr ->ge
//数值
?var_expr: product
    | var_expr "+" product   -> add
    | var_expr "-" product   -> sub

?product: atom
    | product "*" atom  -> mul
    | product "/" atom  -> div

?atom: NUMBER           -> number
     | "-" atom         -> neg
     | NAME             -> var
     | "(" var_expr ")"
     | call_expr


%import common.CNAME -> NAME
%import common.NUMBER
%import common.ESCAPED_STRING
%import common.WS_INLINE
%ignore WS_INLINE
%ignore "\n"